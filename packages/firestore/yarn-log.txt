yarn run v1.5.1
$ karma start --single-run
[32m13 03 2018 18:25:31.113:INFO [karma]: [39mKarma v2.0.0 server started at http://0.0.0.0:8089/
[32m13 03 2018 18:25:31.115:INFO [launcher]: [39mLaunching browser ChromeHeadless with unlimited concurrency
[32m13 03 2018 18:25:31.121:INFO [launcher]: [39mStarting browser ChromeHeadless
[32m13 03 2018 18:25:31.545:INFO [HeadlessChrome 65.0.3325 (Mac OS X 10.13.3)]: [39mConnected on socket FBJh-NoC9P4_1aH2AAAA with id 13503506

  Blob
    [32mâœ“ [39mconstructs values from Base64
    [32mâœ“ [39mconstructs values from Uint8Array
    [32mâœ“ [39mBlob throws on invalid Base64 strings
    [32mâœ“ [39mBlob throws on using the public constructor
    [32mâœ“ [39mPublicBlob works with instanceof checks
    [32mâœ“ [39mcompares correctly
    [32mâœ“ [39msupport equality checking with isEqual()

  CollectionReference
    [32mâœ“ [39msupport equality checking with isEqual()

  DocumentReference
    [32mâœ“ [39msupport equality checking with isEqual()

  DocumentSnapshot
    [32mâœ“ [39msupport equality checking with isEqual()

  Query
    [32mâœ“ [39msupport equality checking with isEqual()

  QuerySnapshot
    [32mâœ“ [39msupport equality checking with isEqual()

  SnapshotMetadata
    [32mâœ“ [39mfrom DocumentSnapshot support equality checking with isEqual()
    [32mâœ“ [39mfrom QuerySnapshot support equality checking with isEqual()

  DocumentChange:
    [32mâœ“ [39mpositions are correct for additions
    [32mâœ“ [39mpositions are correct for deletions
    [32mâœ“ [39mpositions are correct for modifications
    [32mâœ“ [39mpositions are correct for sort order changes
    [32mâœ“ [39mpositions are correct for randomly chosen examples

  FieldPath
    [32mâœ“ [39msupport equality checking with isEqual()

  FieldValue
    [32mâœ“ [39msupport equality checking with isEqual()

  GeoPoint
    [32mâœ“ [39mconstructs values
    [32mâœ“ [39mGeoPoints throw on invalid values
    [32mâœ“ [39mcompares correctly
    [32mâœ“ [39msupport equality checking with isEqual()

  EventManager
    [32mâœ“ [39mhandles many listenables per query
    [32mâœ“ [39mhandles unlisten on unknown listenable gracefully
    [32mâœ“ [39mnotifies listenables in the right order
    [32mâœ“ [39mwill forward applyOnlineStateChange calls

  QueryListener
    [32mâœ“ [39mraises collection events
    [32mâœ“ [39mraises error event
    [32mâœ“ [39mraises event for empty collection after sync
    [32mâœ“ [39mdoes not raise events for metadata changes unless specified
    [32mâœ“ [39mraises document metadata events only when specified
    [32mâœ“ [39mraises query metadata events only when hasPendingWrites on the query changes
    [32mâœ“ [39mMetadata-only document changes are filtered out when includeDocumentMetadataChanges is false
    [32mâœ“ [39mWill wait for sync if online
    [32mâœ“ [39mWill raise initial event when going offline
    [32mâœ“ [39mWill raise initial event when going offline and there are no docs
    [32mâœ“ [39mWill raise initial event when offline and there are no docs

  Query
    [32mâœ“ [39mmatches based on document key
    [32mâœ“ [39mmatches correctly for shallow ancestor query
    [32mâœ“ [39mmatches primitive values for filters
    [32mâœ“ [39mmatches NaN for filters
    [32mâœ“ [39mmatches null for filters
    [32mâœ“ [39mmatches complex objects for filters
    [32mâœ“ [39mdoesn't crash querying unset fields
    [32mâœ“ [39mdoesn't remove complex objects with orderBy
    [32mâœ“ [39mfilters based on array value
    [32mâœ“ [39mfilters based on object value
    [32mâœ“ [39msorts documents in the correct order
    [32mâœ“ [39msorts documents using multiple fields
    [32mâœ“ [39msorts documents with descending too
    [32mâœ“ [39mgenerates canonical ids
    [32mâœ“ [39mgenerates the correct implicit order by's

  TargetIdGenerator
    [32mâœ“ [39mcan initialize with increment and "after value"
    [32mâœ“ [39mcan increments ids
    [32mâœ“ [39mcan return correct generator for local store and sync engine

  Timestamp
    [32mâœ“ [39mfromDate
    [32mâœ“ [39mfromISOString

  View
    [32mâœ“ [39madds documents based on query
    [32mâœ“ [39mremoves documents
    [32mâœ“ [39mreturns null if there are no changes
    [32mâœ“ [39mdoes not return null for the first changes
    [32mâœ“ [39mfilters documents based on query with filter
    [32mâœ“ [39mupdates documents based on query with filter
    [32mâœ“ [39mremoves documents for query with limit
    [32mâœ“ [39mdoesn't report changes for documents beyond limit of query
    [32mâœ“ [39mkeeps track of limbo documents
    [32mâœ“ [39mresumes queries without creating limbo documents
    [32mâœ“ [39mreturns needsRefill on delete limit query
    [32mâœ“ [39mreturns needsRefill on reorder in limit query
    [32mâœ“ [39mdoesn't need refill on reorder within limit
    [32mâœ“ [39mdoesn't need refill on reorder after limit query
    [32mâœ“ [39mdoesn't need refill for additions after the limit
    [32mâœ“ [39mdoesn't need refill for deletions when not near the limit
    [32mâœ“ [39mhandles applying irrelevant docs
    [32mâœ“ [39mcomputes mutatedDocKeys
    [32mâœ“ [39mcomputes removes keys from mutatedDocKeys when new doc does not have local changes
    [32mâœ“ [39mremembers local mutations from previous snapshot
    [32mâœ“ [39mremembers local mutations from previous call to computeDocChanges

  EagerGarbageCollector
    [32mâœ“ [39mcan add or remove references
    [32mâœ“ [39mcan remove all references for ID
    [32mâœ“ [39mcan handle two reference sets at the same time

  EncodedResourcePath
    [32mâœ“ [39mencodes resource paths
    [32mâœ“ [39morders resource paths
    [32mâœ“ [39mprefixes successors correctly

  IndexedDbSchema: createOrUpgradeDb
    [32mâœ“ [39mcan install schema version 1
    [32mâœ“ [39mcan install schema version 2
    [32mâœ“ [39mcan upgrade from schema version 1 to 2

  LocalStore w/ Memory Persistence
    [32mâœ“ [39mhandles SetMutation
    [32mâœ“ [39mhandles SetMutation -> Document
    [32mâœ“ [39mhandles SetMutation -> Ack (Held) -> SetMutation -> Reject -> RemoteEvent (Release Ack)
    [32mâœ“ [39mhandles NoDocument -> SetMutation -> Ack
    [32mâœ“ [39mhandles SetMutation -> NoDocument
    [32mâœ“ [39mhandles Document -> SetMutation -> Ack ->  Document
    [32mâœ“ [39mhandles PatchMutation without prior document
    [32mâœ“ [39mhandles PatchMutation -> Document -> Ack
    [32mâœ“ [39mhandles PatchMutation -> Ack -> Document
    [32mâœ“ [39mhandles DeleteMutation -> Ack
    [32mâœ“ [39mhandles Document -> DeleteMutation -> Ack
    [32mâœ“ [39mhandles DeleteMutation -> Document -> Ack
    [32mâœ“ [39mhandles Document -> NoDocument -> Document
    [32mâœ“ [39mhandles SetMutation -> PatchMutation -> Document -> Ack -> Ack
    [32mâœ“ [39mhandles SetMutation + PatchMutation
    [32mâœ“ [39mhandles SetMutation -> Ack -> PatchMutation -> Reject
    [32mâœ“ [39mhandles SetMutation(A) + SetMutation(B) + PatchMutation(A)
    [32mâœ“ [39mhandles DeleteMutation -> PatchMutation -> Ack -> Ack
    [32mâœ“ [39mcollects garbage after ChangeBatch with no target ids
    [32mâœ“ [39mcollects garbage after ChangeBatch
    [32mâœ“ [39mcollects garbage after acknowledged mutation
    [32mâœ“ [39mcollects garbage after rejected mutation
    [32mâœ“ [39mpins documents in the local view
    [32mâœ“ [39mthrows away documents with unknown target-ids immediately
    [32mâœ“ [39mcan execute document queries
    [32mâœ“ [39mcan execute collection queries
    [32mâœ“ [39mcan execute mixed collection queries
    [32mâœ“ [39mpersists resume tokens
    [32mâœ“ [39mdoes not replace resume token with empty resume token

  LocalStore w/ IndexedDB Persistence
    [32mâœ“ [39mhandles SetMutation
    [32mâœ“ [39mhandles SetMutation -> Document
    [32mâœ“ [39mhandles SetMutation -> Ack (Held) -> SetMutation -> Reject -> RemoteEvent (Release Ack)
    [32mâœ“ [39mhandles NoDocument -> SetMutation -> Ack
    [32mâœ“ [39mhandles SetMutation -> NoDocument
    [32mâœ“ [39mhandles Document -> SetMutation -> Ack ->  Document
    [32mâœ“ [39mhandles PatchMutation without prior document
    [32mâœ“ [39mhandles PatchMutation -> Document -> Ack
    [32mâœ“ [39mhandles PatchMutation -> Ack -> Document
    [32mâœ“ [39mhandles DeleteMutation -> Ack
    [32mâœ“ [39mhandles Document -> DeleteMutation -> Ack
    [32mâœ“ [39mhandles DeleteMutation -> Document -> Ack
    [32mâœ“ [39mhandles Document -> NoDocument -> Document
    [32mâœ“ [39mhandles SetMutation -> PatchMutation -> Document -> Ack -> Ack
    [32mâœ“ [39mhandles SetMutation + PatchMutation
    [32mâœ“ [39mhandles SetMutation -> Ack -> PatchMutation -> Reject
    [32mâœ“ [39mhandles SetMutation(A) + SetMutation(B) + PatchMutation(A)
    [32mâœ“ [39mhandles DeleteMutation -> PatchMutation -> Ack -> Ack
    [32mâœ“ [39mcollects garbage after ChangeBatch with no target ids
    [32mâœ“ [39mcollects garbage after ChangeBatch
    [32mâœ“ [39mcollects garbage after acknowledged mutation
    [32mâœ“ [39mcollects garbage after rejected mutation
    [32mâœ“ [39mpins documents in the local view
    [32mâœ“ [39mthrows away documents with unknown target-ids immediately
    [32mâœ“ [39mcan execute document queries
    [32mâœ“ [39mcan execute collection queries
    [32mâœ“ [39mcan execute mixed collection queries
    [32mâœ“ [39mpersists resume tokens
    [32mâœ“ [39mdoes not replace resume token with empty resume token

  MemoryMutationQueue
    [32mâœ“ [39mcan count batches
    [32mâœ“ [39mcan acknowledge batches through batchId
    [32mâœ“ [39mcan acknowledge then remove
    [32mâœ“ [39mgetHighestAcknowledgedBatchId() never exceeds getNextBatchId()
    [32mâœ“ [39mcan lookup mutation batch
    [32mâœ“ [39mcan getNextMutationBatchAfterBatchId()
    [32mâœ“ [39mcan getAllMutationBatchesThroughBatchId()
    [32mâœ“ [39mcan getAllMutationBatchesAffectingDocumentKey()
    [32mâœ“ [39mcan getAllMutationBatchesAffectingQuery()
    [32mâœ“ [39mcan getAllMutationBatchesAffectingQuery() with compound batches
    [32mâœ“ [39mcan emits garbage events while removing mutation batches
    [32mâœ“ [39mcan save the last stream token
    [32mâœ“ [39mcan removeMutationBatches()

  IndexedDbMutationQueue
    [32mâœ“ [39mcan count batches
    [32mâœ“ [39mcan acknowledge batches through batchId
    [32mâœ“ [39mcan acknowledge then remove
    [32mâœ“ [39mgetHighestAcknowledgedBatchId() never exceeds getNextBatchId()
    [32mâœ“ [39mcan lookup mutation batch
    [32mâœ“ [39mcan getNextMutationBatchAfterBatchId()
    [32mâœ“ [39mcan getAllMutationBatchesThroughBatchId()
    [32mâœ“ [39mcan getAllMutationBatchesAffectingDocumentKey()
    [32mâœ“ [39mcan getAllMutationBatchesAffectingQuery()
    [32mâœ“ [39mcan getAllMutationBatchesAffectingQuery() with compound batches
    [32mâœ“ [39mcan emits garbage events while removing mutation batches
    [32mâœ“ [39mcan save the last stream token
    [32mâœ“ [39mcan removeMutationBatches()
    loadNextBatchIdFromDb
      [32mâœ“ [39mreturns zero when no mutations.
      [32mâœ“ [39mfinds next id after single mutation batch
      [32mâœ“ [39mfinds max across users

  PersistencePromise
    [32mâœ“ [39mCan chain synchronous functions
    [32mâœ“ [39mCan chain asynchronous functions
    [32mâœ“ [39mCan catch synchronous functions
    [32mâœ“ [39mCan catch asynchronous functions
    [32mâœ“ [39mignores catches without errors
    [32mâœ“ [39mignores catches without errors async
    [32mâœ“ [39mcan catch errors twice sync
    [32mâœ“ [39mcan catch errors twice async
    [32mâœ“ [39mcan return undefined sync
    [32mâœ“ [39mcan return undefined async
    [32mâœ“ [39mcan waitFor sync
    [32mâœ“ [39mcan waitFor async
    [32mâœ“ [39mcan waitFor async error

  MemoryQueryCache
    [32mâœ“ [39mreturns null for query not in cache
    [32mâœ“ [39mcan set and read a query
    [32mâœ“ [39mhandles canonical ID collisions
    [32mâœ“ [39mcan set query to new value
    [32mâœ“ [39mcan remove a query
    [32mâœ“ [39mcan remove matching keys when a query is removed
    [32mâœ“ [39madds or removes matching keys
    [32mâœ“ [39mcan remove matching keys for a targetId
    [32mâœ“ [39memits garbage collection events for removes
    [32mâœ“ [39mcan get matching keys for targetId
    [32mâœ“ [39mcan get / set highestTargetId
    [32mâœ“ [39mcan get / set lastRemoteSnapshotVersion

  IndexedDbQueryCache
    [32mâœ“ [39mreturns null for query not in cache
    [32mâœ“ [39mcan set and read a query
    [32mâœ“ [39mhandles canonical ID collisions
    [32mâœ“ [39mcan set query to new value
    [32mâœ“ [39mcan remove a query
    [32mâœ“ [39mcan remove matching keys when a query is removed
    [32mâœ“ [39madds or removes matching keys
    [32mâœ“ [39mcan remove matching keys for a targetId
    [32mâœ“ [39memits garbage collection events for removes
    [32mâœ“ [39mcan get matching keys for targetId
    [32mâœ“ [39mcan get / set highestTargetId
    [32mâœ“ [39mcan get / set lastRemoteSnapshotVersion

  ReferenceSet
    [32mâœ“ [39mcan add/remove references
    [32mâœ“ [39mcan remove all references for a target ID

  MemoryRemoteDocumentCache
    [32mâœ“ [39mreturns null for document not in cache
    [32mâœ“ [39mcan set and read a document
    [32mâœ“ [39mcan set and read a document at a long path
    [32mâœ“ [39mcan set and read a NoDocument
    [32mâœ“ [39mcan set document to new value
    [32mâœ“ [39mcan remove document
    [32mâœ“ [39mcan remove nonexistent document
    [32mâœ“ [39mcan get documents matching query

  IndexedDbRemoteDocumentCache
    [32mâœ“ [39mreturns null for document not in cache
    [32mâœ“ [39mcan set and read a document
    [32mâœ“ [39mcan set and read a document at a long path
    [32mâœ“ [39mcan set and read a NoDocument
    [32mâœ“ [39mcan set document to new value
    [32mâœ“ [39mcan remove document
    [32mâœ“ [39mcan remove nonexistent document
    [32mâœ“ [39mcan get documents matching query

  RemoteDocumentChangeBuffer
    [32mâœ“ [39mcan read unchanged entry
    [32mâœ“ [39mcan add entry and read it back
    [32mâœ“ [39mcan apply changes
ERROR LOG: [36m'[2018-03-13T22:25:36.092Z]  @firebase/firestore:', 'Firestore (4.11.0): FIRESTORE (4.11.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'[39m
ERROR: '[2018-03-13T22:25:36.092Z]  @firebase/firestore:', 'Firestore (4.11.0): FIRESTORE (4.11.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
ERROR LOG: [36m'[2018-03-13T22:25:36.093Z]  @firebase/firestore:', 'Firestore (4.11.0): FIRESTORE (4.11.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'[39m
ERROR: '[2018-03-13T22:25:36.093Z]  @firebase/firestore:', 'Firestore (4.11.0): FIRESTORE (4.11.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
ERROR LOG: [36m'[2018-03-13T22:25:36.094Z]  @firebase/firestore:', 'Firestore (4.11.0): FIRESTORE (4.11.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'[39m
ERROR: '[2018-03-13T22:25:36.094Z]  @firebase/firestore:', 'Firestore (4.11.0): FIRESTORE (4.11.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
    [32mâœ“ [39mmethods fail after apply.

  SimpleDb
    [32mâœ“ [39mcan get
    [32mâœ“ [39mcan put
    [32mâœ“ [39mlets you explicitly abort transactions
    [32mâœ“ [39maborts transactions when an error happens
    [32mâœ“ [39mstill propagates error if you throw after aborting an exception.
    [32mâœ“ [39mcan delete
    [32mâœ“ [39mloadAll
    [32mâœ“ [39mdeleteAll
    [32mâœ“ [39mdeleteAll in key range
    [32mâœ“ [39mdeleteAll in index range
    [32mâœ“ [39mcan iterate
    [32mâœ“ [39mcan iterate and skip keys
    [32mâœ“ [39mcan iterate in reverse
    [32mâœ“ [39mcan iterate and skip keys in reverse
    [32mâœ“ [39mcan iterate and skip over the index
    [32mâœ“ [39mcan iterate using index and range and stop before end
    [32mâœ“ [39mcan iterate over index as keys-only
    [32mâœ“ [39mcan iterate over index using a partial bound
    [32mâœ“ [39mcan use arrays as keys and do partial bounds ranges

  Document
    [32mâœ“ [39mcan be constructed
    [32mâœ“ [39mreturns fields correctly
    [32mâœ“ [39mequals to other same documents

  DocumentSet
    [32mâœ“ [39mkeeps documents in the right order
    [32mâœ“ [39madds and deletes elements
    [32mâœ“ [39mupdates documents
    [32mâœ“ [39madds docs equal to comparator with different keys
    [32mâœ“ [39mequals to other document set with the same elements and order

  FieldValue
    [32mâœ“ [39mcan parse integers
    [32mâœ“ [39mcan parse doubles
    [32mâœ“ [39mcan parse null
    [32mâœ“ [39mcan parse booleans
    [32mâœ“ [39mcan parse dates
    [32mâœ“ [39mcan parse geo points
    [32mâœ“ [39mcan parse bytes
    [32mâœ“ [39mcan parse simple objects
    [32mâœ“ [39mcan parse nested objects
    [32mâœ“ [39mcan parse empty objects
    [32mâœ“ [39mcan extract fields
    [32mâœ“ [39mcan overwrite existing fields
    [32mâœ“ [39mcan add new fields
    [32mâœ“ [39mcan implicitly create objects
    [32mâœ“ [39mcan overwrite primitive values to create objects
    [32mâœ“ [39mcan add to nested objects
    [32mâœ“ [39mcan delete keys
    [32mâœ“ [39mcan delete nested keys
    [32mâœ“ [39mcan delete, resulting in empty object
    [32mâœ“ [39mwill not delete nested keys on primitive values
    [32mâœ“ [39mcompares values for equality
    [32mâœ“ [39morders types correctly

  Mutation
    [32mâœ“ [39mcan apply sets to documents
    [32mâœ“ [39mcan apply patches to documents
    [32mâœ“ [39mcan apply patches with merges to missing documents
    [32mâœ“ [39mcan apply patches with merges to null documents
    [32mâœ“ [39mwill delete values from the field-mask
    [32mâœ“ [39mwill patch a primitive value
    [32mâœ“ [39mpatching a NoDocument yields a NoDocument
    [32mâœ“ [39mcan apply local transforms to documents
    [32mâœ“ [39mcan apply server-acked transforms to documents
    [32mâœ“ [39mcan apply deletes to documents
    [32mâœ“ [39mcan apply sets with mutation results
    [32mâœ“ [39mwill apply patches with mutation results
    [32mâœ“ [39mtransitions versions correctly

  Path
    [32mâœ“ [39mcan be constructed
    [32mâœ“ [39mcan index into itself
    [32mâœ“ [39mcan be constructed with offsets
    [32mâœ“ [39mcan pop front repeatedly
    [32mâœ“ [39mcan yield the last segment
    [32mâœ“ [39mcan create child path
    [32mâœ“ [39mcan pop last repeatedly
    [32mâœ“ [39mcompares correctly
    [32mâœ“ [39mdetermines prefix correctly
    [32mâœ“ [39mcan be constructed from field path.
    fails to construct from invalid field path
      [32mâœ“ [39m""
      [32mâœ“ [39m"foo\"
      [32mâœ“ [39m"foo\x"
      [32mâœ“ [39m"foo."
      [32mâœ“ [39m".foo"
      [32mâœ“ [39m"foo..bar"

  Platform
    [32mâœ“ [39mcan load the platform at runtime

  RemoteEvent
    [32mâœ“ [39mwill accumulate document added and removed events
    [32mâœ“ [39mwill ignore events for pending targets
    [32mâœ“ [39mwill ignore events for removed targets
    [32mâœ“ [39mwill keep reset mapping even with updates
    [32mâœ“ [39mwill handle single reset
    [32mâœ“ [39mwill handle target add and removal in same batch
    [32mâœ“ [39mtarget current change will mark the target current
    [32mâœ“ [39mtarget added change will reset previous state
    [32mâœ“ [39mno change will still mark the affected targets
    [32mâœ“ [39mexistence filters will replace previous existence filters
    [32mâœ“ [39mexistence filter mismatch resets target
    [32mâœ“ [39mhandles document update
LOG LOG: [36m'Running spec: (Persistence) Events are raised after watch ack'[39m
LOG: 'Running spec: (Persistence) Events are raised after watch ack'

  Collections:
    [32mâœ“ [39m(Persistence) Events are raised after watch ack
LOG LOG: [36m'Running spec: (Memory) Events are raised after watch ack'[39m
LOG: 'Running spec: (Memory) Events are raised after watch ack'
    [32mâœ“ [39m(Memory) Events are raised after watch ack
LOG LOG: [36m'Running spec: (Persistence) Events are raised for local sets before watch ack'[39m
LOG: 'Running spec: (Persistence) Events are raised for local sets before watch ack'
    [32mâœ“ [39m(Persistence) Events are raised for local sets before watch ack
LOG LOG: [36m'Running spec: (Memory) Events are raised for local sets before watch ack'[39m
LOG: 'Running spec: (Memory) Events are raised for local sets before watch ack'
    [32mâœ“ [39m(Memory) Events are raised for local sets before watch ack
LOG LOG: [36m'Running spec: (Persistence) Existence filter mismatch triggers re-run of query'[39m
LOG: 'Running spec: (Persistence) Existence filter mismatch triggers re-run of query'

  Existence Filters:
    [32mâœ“ [39m(Persistence) Existence filter mismatch triggers re-run of query
LOG LOG: [36m'Running spec: (Memory) Existence filter mismatch triggers re-run of query'[39m
LOG: 'Running spec: (Memory) Existence filter mismatch triggers re-run of query'
    [32mâœ“ [39m(Memory) Existence filter mismatch triggers re-run of query
LOG LOG: [36m'Running spec: (Persistence) Existence filter mismatch will drop resume token'[39m
LOG: 'Running spec: (Persistence) Existence filter mismatch will drop resume token'
    [32mâœ“ [39m(Persistence) Existence filter mismatch will drop resume token
LOG LOG: [36m'Running spec: (Memory) Existence filter mismatch will drop resume token'[39m
LOG: 'Running spec: (Memory) Existence filter mismatch will drop resume token'
    [32mâœ“ [39m(Memory) Existence filter mismatch will drop resume token
LOG LOG: [36m'Running spec: (Persistence) Existence filter limbo resolution is denied'[39m
LOG: 'Running spec: (Persistence) Existence filter limbo resolution is denied'
    [32mâœ“ [39m(Persistence) Existence filter limbo resolution is denied
LOG LOG: [36m'Running spec: (Memory) Existence filter limbo resolution is denied'[39m
LOG: 'Running spec: (Memory) Existence filter limbo resolution is denied'
    [32mâœ“ [39m(Memory) Existence filter limbo resolution is denied
LOG LOG: [36m'Running spec: (Persistence) Limbo documents are deleted without an existence filter'[39m
LOG: 'Running spec: (Persistence) Limbo documents are deleted without an existence filter'

  Limbo Documents:
    [32mâœ“ [39m(Persistence) Limbo documents are deleted without an existence filter
LOG LOG: [36m'Running spec: (Memory) Limbo documents are deleted without an existence filter'[39m
LOG: 'Running spec: (Memory) Limbo documents are deleted without an existence filter'
    [32mâœ“ [39m(Memory) Limbo documents are deleted without an existence filter
LOG LOG: [36m'Running spec: (Persistence) Limbo documents are deleted with an existence filter'[39m
LOG: 'Running spec: (Persistence) Limbo documents are deleted with an existence filter'
    [32mâœ“ [39m(Persistence) Limbo documents are deleted with an existence filter
LOG LOG: [36m'Running spec: (Memory) Limbo documents are deleted with an existence filter'[39m
LOG: 'Running spec: (Memory) Limbo documents are deleted with an existence filter'
    [32mâœ“ [39m(Memory) Limbo documents are deleted with an existence filter
LOG LOG: [36m'Running spec: (Persistence) Limbo documents are resolved with updates'[39m
LOG: 'Running spec: (Persistence) Limbo documents are resolved with updates'
    [32mâœ“ [39m(Persistence) Limbo documents are resolved with updates
LOG LOG: [36m'Running spec: (Memory) Limbo documents are resolved with updates'[39m
LOG: 'Running spec: (Memory) Limbo documents are resolved with updates'
    [32mâœ“ [39m(Memory) Limbo documents are resolved with updates
LOG LOG: [36m'Running spec: (Persistence) Limbo documents are resolved with updates in different snapshot than "current"'[39m
LOG: 'Running spec: (Persistence) Limbo documents are resolved with updates in different snapshot than "current"'
    [32mâœ“ [39m(Persistence) Limbo documents are resolved with updates in different snapshot than "current"
LOG LOG: [36m'Running spec: (Memory) Limbo documents are resolved with updates in different snapshot than "current"'[39m
LOG: 'Running spec: (Memory) Limbo documents are resolved with updates in different snapshot than "current"'
    [32mâœ“ [39m(Memory) Limbo documents are resolved with updates in different snapshot than "current"
LOG LOG: [36m'Running spec: (Persistence) Document remove message will cause docs to go in limbo'[39m
LOG: 'Running spec: (Persistence) Document remove message will cause docs to go in limbo'
    [32mâœ“ [39m(Persistence) Document remove message will cause docs to go in limbo
LOG LOG: [36m'Running spec: (Memory) Document remove message will cause docs to go in limbo'[39m
LOG: 'Running spec: (Memory) Document remove message will cause docs to go in limbo'
    [32mâœ“ [39m(Memory) Document remove message will cause docs to go in limbo
LOG LOG: [36m'Running spec: (Persistence) Documents in limit are replaced by remote event'[39m
LOG: 'Running spec: (Persistence) Documents in limit are replaced by remote event'

  Limits:
    [32mâœ“ [39m(Persistence) Documents in limit are replaced by remote event
LOG LOG: [36m'Running spec: (Memory) Documents in limit are replaced by remote event'[39m
LOG: 'Running spec: (Memory) Documents in limit are replaced by remote event'
    [32mâœ“ [39m(Memory) Documents in limit are replaced by remote event
LOG LOG: [36m'Running spec: (Persistence) Deleted Document in limbo in full limit query'[39m
LOG: 'Running spec: (Persistence) Deleted Document in limbo in full limit query'
    [32mâœ“ [39m(Persistence) Deleted Document in limbo in full limit query
LOG LOG: [36m'Running spec: (Memory) Deleted Document in limbo in full limit query'[39m
LOG: 'Running spec: (Memory) Deleted Document in limbo in full limit query'
    [32mâœ“ [39m(Memory) Deleted Document in limbo in full limit query
LOG LOG: [36m'Running spec: (Persistence) Documents in limit can handle removed messages'[39m
LOG: 'Running spec: (Persistence) Documents in limit can handle removed messages'
    [32mâœ“ [39m(Persistence) Documents in limit can handle removed messages
LOG LOG: [36m'Running spec: (Memory) Documents in limit can handle removed messages'[39m
LOG: 'Running spec: (Memory) Documents in limit can handle removed messages'
    [32mâœ“ [39m(Memory) Documents in limit can handle removed messages
LOG LOG: [36m'Running spec: (Persistence) Documents in limit are can handle removed messages for only one of many query'[39m
LOG: 'Running spec: (Persistence) Documents in limit are can handle removed messages for only one of many query'
    [32mâœ“ [39m(Persistence) Documents in limit are can handle removed messages for only one of many query
LOG LOG: [36m'Running spec: (Memory) Documents in limit are can handle removed messages for only one of many query'[39m
LOG: 'Running spec: (Memory) Documents in limit are can handle removed messages for only one of many query'
    [32mâœ“ [39m(Memory) Documents in limit are can handle removed messages for only one of many query
LOG LOG: [36m'Running spec: (Persistence) Multiple docs in limbo in full limit query'[39m
LOG: 'Running spec: (Persistence) Multiple docs in limbo in full limit query'
    [32mâœ“ [39m(Persistence) Multiple docs in limbo in full limit query
LOG LOG: [36m'Running spec: (Memory) Multiple docs in limbo in full limit query'[39m
LOG: 'Running spec: (Memory) Multiple docs in limbo in full limit query'
    [32mâœ“ [39m(Memory) Multiple docs in limbo in full limit query
LOG LOG: [36m'Running spec: (Persistence) Contents of query are cleared when listen is removed.'[39m
LOG: 'Running spec: (Persistence) Contents of query are cleared when listen is removed.'

  Listens:
    [32mâœ“ [39m(Persistence) Contents of query are cleared when listen is removed.
LOG LOG: [36m'Running spec: (Memory) Contents of query are cleared when listen is removed.'[39m
LOG: 'Running spec: (Memory) Contents of query are cleared when listen is removed.'
    [32mâœ“ [39m(Memory) Contents of query are cleared when listen is removed.
LOG LOG: [36m'Running spec: (Persistence) Contents of query update when new data is received.'[39m
LOG: 'Running spec: (Persistence) Contents of query update when new data is received.'
    [32mâœ“ [39m(Persistence) Contents of query update when new data is received.
LOG LOG: [36m'Running spec: (Memory) Contents of query update when new data is received.'[39m
LOG: 'Running spec: (Memory) Contents of query update when new data is received.'
    [32mâœ“ [39m(Memory) Contents of query update when new data is received.
LOG LOG: [36m'Running spec: (Persistence) Ensure correct query results with latency-compensated deletes'[39m
LOG: 'Running spec: (Persistence) Ensure correct query results with latency-compensated deletes'
    [32mâœ“ [39m(Persistence) Ensure correct query results with latency-compensated deletes
LOG LOG: [36m'Running spec: (Memory) Ensure correct query results with latency-compensated deletes'[39m
LOG: 'Running spec: (Memory) Ensure correct query results with latency-compensated deletes'
    [32mâœ“ [39m(Memory) Ensure correct query results with latency-compensated deletes
LOG LOG: [36m'Running spec: (Persistence) Will process removals without waiting for a consistent snapshot'[39m
LOG: 'Running spec: (Persistence) Will process removals without waiting for a consistent snapshot'
    [32mâœ“ [39m(Persistence) Will process removals without waiting for a consistent snapshot
LOG LOG: [36m'Running spec: (Memory) Will process removals without waiting for a consistent snapshot'[39m
LOG: 'Running spec: (Memory) Will process removals without waiting for a consistent snapshot'
    [32mâœ“ [39m(Memory) Will process removals without waiting for a consistent snapshot
LOG LOG: [36m'Running spec: (Persistence) Will gracefully process failed targets'[39m
LOG: 'Running spec: (Persistence) Will gracefully process failed targets'
    [32mâœ“ [39m(Persistence) Will gracefully process failed targets
LOG LOG: [36m'Running spec: (Memory) Will gracefully process failed targets'[39m
LOG: 'Running spec: (Memory) Will gracefully process failed targets'
    [32mâœ“ [39m(Memory) Will gracefully process failed targets
LOG LOG: [36m'Running spec: (Persistence) Will gracefully handle watch stream reverting snapshots'[39m
LOG: 'Running spec: (Persistence) Will gracefully handle watch stream reverting snapshots'
    [32mâœ“ [39m(Persistence) Will gracefully handle watch stream reverting snapshots
LOG LOG: [36m'Running spec: (Memory) Will gracefully handle watch stream reverting snapshots'[39m
LOG: 'Running spec: (Memory) Will gracefully handle watch stream reverting snapshots'
    [32mâœ“ [39m(Memory) Will gracefully handle watch stream reverting snapshots
LOG LOG: [36m'Running spec: (Persistence) Will gracefully handle watch stream reverting snapshots (with restart)'[39m
LOG: 'Running spec: (Persistence) Will gracefully handle watch stream reverting snapshots (with restart)'
    [32mâœ“ [39m(Persistence) Will gracefully handle watch stream reverting snapshots (with restart)
LOG LOG: [36m'Running spec: (Memory) Will gracefully handle watch stream reverting snapshots (with restart)'[39m
LOG: 'Running spec: (Memory) Will gracefully handle watch stream reverting snapshots (with restart)'
    [32mâœ“ [39m(Memory) Will gracefully handle watch stream reverting snapshots (with restart)
LOG LOG: [36m'Running spec: (Persistence) Individual documents cannot revert'[39m
LOG: 'Running spec: (Persistence) Individual documents cannot revert'
    [32mâœ“ [39m(Persistence) Individual documents cannot revert
LOG LOG: [36m'Running spec: (Memory) Individual documents cannot revert'[39m
LOG: 'Running spec: (Memory) Individual documents cannot revert'
    [32mâœ“ [39m(Memory) Individual documents cannot revert
LOG LOG: [36m'Running spec: (Persistence) Listens are reestablished after network disconnect'[39m
LOG: 'Running spec: (Persistence) Listens are reestablished after network disconnect'
    [32mâœ“ [39m(Persistence) Listens are reestablished after network disconnect
LOG LOG: [36m'Running spec: (Memory) Listens are reestablished after network disconnect'[39m
LOG: 'Running spec: (Memory) Listens are reestablished after network disconnect'
    [32mâœ“ [39m(Memory) Listens are reestablished after network disconnect
LOG LOG: [36m'Running spec: (Persistence) Empty queries are resolved if client goes offline'[39m
LOG: 'Running spec: (Persistence) Empty queries are resolved if client goes offline'
ERROR LOG: [36m'[2018-03-13T22:25:38.284Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'[39m
ERROR: '[2018-03-13T22:25:38.284Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'

  Offline:
    [32mâœ“ [39m(Persistence) Empty queries are resolved if client goes offline
LOG LOG: [36m'Running spec: (Memory) Empty queries are resolved if client goes offline'[39m
LOG: 'Running spec: (Memory) Empty queries are resolved if client goes offline'
ERROR LOG: [36m'[2018-03-13T22:25:38.297Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'[39m
ERROR: '[2018-03-13T22:25:38.297Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'
    [32mâœ“ [39m(Memory) Empty queries are resolved if client goes offline
LOG LOG: [36m'Running spec: (Persistence) A successful message delays offline status'[39m
LOG: 'Running spec: (Persistence) A successful message delays offline status'
    [32mâœ“ [39m(Persistence) A successful message delays offline status
LOG LOG: [36m'Running spec: (Memory) A successful message delays offline status'[39m
LOG: 'Running spec: (Memory) A successful message delays offline status'
    [32mâœ“ [39m(Memory) A successful message delays offline status
LOG LOG: [36m'Running spec: (Persistence) Removing all listeners delays "Offline" status on next listen'[39m
LOG: 'Running spec: (Persistence) Removing all listeners delays "Offline" status on next listen'
ERROR LOG: [36m'[2018-03-13T22:25:38.357Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'[39m
ERROR: '[2018-03-13T22:25:38.357Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'
    [32mâœ“ [39m(Persistence) Removing all listeners delays "Offline" status on next listen
LOG LOG: [36m'Running spec: (Memory) Removing all listeners delays "Offline" status on next listen'[39m
LOG: 'Running spec: (Memory) Removing all listeners delays "Offline" status on next listen'
ERROR LOG: [36m'[2018-03-13T22:25:40.494Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'[39m
ERROR: '[2018-03-13T22:25:40.494Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'
    [32mâœ“ [39m(Memory) Removing all listeners delays "Offline" status on next listen
LOG LOG: [36m'Running spec: (Persistence) Queries revert to fromCache=true when offline.'[39m
LOG: 'Running spec: (Persistence) Queries revert to fromCache=true when offline.'
    [32mâœ“ [39m(Persistence) Queries revert to fromCache=true when offline.
LOG LOG: [36m'Running spec: (Memory) Queries revert to fromCache=true when offline.'[39m
LOG: 'Running spec: (Memory) Queries revert to fromCache=true when offline.'
    [32mâœ“ [39m(Memory) Queries revert to fromCache=true when offline.
LOG LOG: [36m'Running spec: (Persistence) Queries with limbo documents handle going offline.'[39m
LOG: 'Running spec: (Persistence) Queries with limbo documents handle going offline.'
    [32mâœ“ [39m(Persistence) Queries with limbo documents handle going offline.
LOG LOG: [36m'Running spec: (Memory) Queries with limbo documents handle going offline.'[39m
LOG: 'Running spec: (Memory) Queries with limbo documents handle going offline.'
    [32mâœ“ [39m(Memory) Queries with limbo documents handle going offline.
LOG LOG: [36m'Running spec: (Persistence) OnlineState timeout triggers offline behavior'[39m
LOG: 'Running spec: (Persistence) OnlineState timeout triggers offline behavior'
ERROR LOG: [36m'[2018-03-13T22:25:41.593Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'[39m
ERROR: '[2018-03-13T22:25:41.593Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'
    [32mâœ“ [39m(Persistence) OnlineState timeout triggers offline behavior
LOG LOG: [36m'Running spec: (Memory) OnlineState timeout triggers offline behavior'[39m
LOG: 'Running spec: (Memory) OnlineState timeout triggers offline behavior'
ERROR LOG: [36m'[2018-03-13T22:25:41.625Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'[39m
ERROR: '[2018-03-13T22:25:41.625Z]  @firebase/firestore:', 'Firestore (4.11.0): Could not reach Firestore backend.'
    [32mâœ“ [39m(Memory) OnlineState timeout triggers offline behavior
LOG LOG: [36m'Running spec: (Persistence) orderBy applies filtering based on local state'[39m
LOG: 'Running spec: (Persistence) orderBy applies filtering based on local state'

  OrderBy:
    [32mâœ“ [39m(Persistence) orderBy applies filtering based on local state
LOG LOG: [36m'Running spec: (Memory) orderBy applies filtering based on local state'[39m
LOG: 'Running spec: (Memory) orderBy applies filtering based on local state'
    [32mâœ“ [39m(Memory) orderBy applies filtering based on local state
LOG LOG: [36m'Running spec: (Persistence) Local mutations are persisted and re-sent'[39m
LOG: 'Running spec: (Persistence) Local mutations are persisted and re-sent'

  Persistence:
    [32mâœ“ [39m(Persistence) Local mutations are persisted and re-sent
LOG LOG: [36m'Running spec: (Memory) Local mutations are persisted and re-sent'[39m
LOG: 'Running spec: (Memory) Local mutations are persisted and re-sent'
    [32mâœ“ [39m(Memory) Local mutations are persisted and re-sent
LOG LOG: [36m'Running spec: (Persistence) Persisted local mutations are visible to listeners'[39m
LOG: 'Running spec: (Persistence) Persisted local mutations are visible to listeners'
    [32mâœ“ [39m(Persistence) Persisted local mutations are visible to listeners
LOG LOG: [36m'Running spec: (Memory) Persisted local mutations are visible to listeners'[39m
LOG: 'Running spec: (Memory) Persisted local mutations are visible to listeners'
    [32mâœ“ [39m(Memory) Persisted local mutations are visible to listeners
LOG LOG: [36m'Running spec: (Persistence) Remote documents are persisted'[39m
LOG: 'Running spec: (Persistence) Remote documents are persisted'
    [32mâœ“ [39m(Persistence) Remote documents are persisted
LOG LOG: [36m'Running spec: (Memory) Remote documents are persisted'[39m
LOG: 'Running spec: (Memory) Remote documents are persisted'
    [32mâœ“ [39m(Memory) Remote documents are persisted
LOG LOG: [36m'Running spec: (Persistence) Remote documents from watch are not GC'd'[39m
LOG: 'Running spec: (Persistence) Remote documents from watch are not GC'd'
    [32mâœ“ [39m(Persistence) Remote documents from watch are not GC'd
LOG LOG: [36m'Running spec: (Memory) Remote documents from watch are not GC'd'[39m
LOG: 'Running spec: (Memory) Remote documents from watch are not GC'd'
    [32mâœ“ [39m(Memory) Remote documents from watch are not GC'd
LOG LOG: [36m'Running spec: (Persistence) Remote documents from user sets are not GC'd'[39m
LOG: 'Running spec: (Persistence) Remote documents from user sets are not GC'd'
    [32mâœ“ [39m(Persistence) Remote documents from user sets are not GC'd
LOG LOG: [36m'Running spec: (Memory) Remote documents from user sets are not GC'd'[39m
LOG: 'Running spec: (Memory) Remote documents from user sets are not GC'd'
    [32mâœ“ [39m(Memory) Remote documents from user sets are not GC'd
LOG LOG: [36m'Running spec: (Persistence) Mutation Queue is persisted across uid switches'[39m
LOG: 'Running spec: (Persistence) Mutation Queue is persisted across uid switches'
    [32mâœ“ [39m(Persistence) Mutation Queue is persisted across uid switches
LOG LOG: [36m'Running spec: (Memory) Mutation Queue is persisted across uid switches'[39m
LOG: 'Running spec: (Memory) Mutation Queue is persisted across uid switches'
    [32mâœ“ [39m(Memory) Mutation Queue is persisted across uid switches
LOG LOG: [36m'Running spec: (Persistence) Mutation Queue is persisted across uid switches (with restarts)'[39m
LOG: 'Running spec: (Persistence) Mutation Queue is persisted across uid switches (with restarts)'
    [32mâœ“ [39m(Persistence) Mutation Queue is persisted across uid switches (with restarts)
LOG LOG: [36m'Running spec: (Memory) Mutation Queue is persisted across uid switches (with restarts)'[39m
LOG: 'Running spec: (Memory) Mutation Queue is persisted across uid switches (with restarts)'
    [32mâœ“ [39m(Memory) Mutation Queue is persisted across uid switches (with restarts)
LOG LOG: [36m'Running spec: (Persistence) Visible mutations reflect uid switches'[39m
LOG: 'Running spec: (Persistence) Visible mutations reflect uid switches'
    [32mâœ“ [39m(Persistence) Visible mutations reflect uid switches
LOG LOG: [36m'Running spec: (Memory) Visible mutations reflect uid switches'[39m
LOG: 'Running spec: (Memory) Visible mutations reflect uid switches'
    [32mâœ“ [39m(Memory) Visible mutations reflect uid switches
LOG LOG: [36m'Running spec: (Persistence) Waits for watch to remove targets'[39m
LOG: 'Running spec: (Persistence) Waits for watch to remove targets'

  Remote store:
    [32mâœ“ [39m(Persistence) Waits for watch to remove targets
LOG LOG: [36m'Running spec: (Memory) Waits for watch to remove targets'[39m
LOG: 'Running spec: (Memory) Waits for watch to remove targets'
    [32mâœ“ [39m(Memory) Waits for watch to remove targets
LOG LOG: [36m'Running spec: (Persistence) Waits for watch to ack last target add'[39m
LOG: 'Running spec: (Persistence) Waits for watch to ack last target add'
    [32mâœ“ [39m(Persistence) Waits for watch to ack last target add
LOG LOG: [36m'Running spec: (Memory) Waits for watch to ack last target add'[39m
LOG: 'Running spec: (Memory) Waits for watch to ack last target add'
    [32mâœ“ [39m(Memory) Waits for watch to ack last target add
LOG LOG: [36m'Running spec: (Persistence) Cleans up watch state correctly'[39m
LOG: 'Running spec: (Persistence) Cleans up watch state correctly'
    [32mâœ“ [39m(Persistence) Cleans up watch state correctly
LOG LOG: [36m'Running spec: (Memory) Cleans up watch state correctly'[39m
LOG: 'Running spec: (Memory) Cleans up watch state correctly'
    [32mâœ“ [39m(Memory) Cleans up watch state correctly
LOG LOG: [36m'Running spec: (Persistence) Resume tokens are sent after watch stream restarts'[39m
LOG: 'Running spec: (Persistence) Resume tokens are sent after watch stream restarts'

  Resume tokens:
    [32mâœ“ [39m(Persistence) Resume tokens are sent after watch stream restarts
LOG LOG: [36m'Running spec: (Memory) Resume tokens are sent after watch stream restarts'[39m
LOG: 'Running spec: (Memory) Resume tokens are sent after watch stream restarts'
    [32mâœ“ [39m(Memory) Resume tokens are sent after watch stream restarts
LOG LOG: [36m'Running spec: (Persistence) Resume tokens are used across new listens'[39m
LOG: 'Running spec: (Persistence) Resume tokens are used across new listens'
    [32mâœ“ [39m(Persistence) Resume tokens are used across new listens
LOG LOG: [36m'Running spec: (Memory) Resume tokens are used across new listens'[39m
LOG: 'Running spec: (Memory) Resume tokens are used across new listens'
    [32mâœ“ [39m(Memory) Resume tokens are used across new listens
LOG LOG: [36m'Running spec: (Persistence) Two sequential writes to different documents smoke test.'[39m
LOG: 'Running spec: (Persistence) Two sequential writes to different documents smoke test.'

  Writes:
    [32mâœ“ [39m(Persistence) Two sequential writes to different documents smoke test.
LOG LOG: [36m'Running spec: (Memory) Two sequential writes to different documents smoke test.'[39m
LOG: 'Running spec: (Memory) Two sequential writes to different documents smoke test.'
    [32mâœ“ [39m(Memory) Two sequential writes to different documents smoke test.
LOG LOG: [36m'Running spec: (Persistence) Event is raised for a local set before and after the write ack'[39m
LOG: 'Running spec: (Persistence) Event is raised for a local set before and after the write ack'
    [32mâœ“ [39m(Persistence) Event is raised for a local set before and after the write ack
LOG LOG: [36m'Running spec: (Memory) Event is raised for a local set before and after the write ack'[39m
LOG: 'Running spec: (Memory) Event is raised for a local set before and after the write ack'
    [32mâœ“ [39m(Memory) Event is raised for a local set before and after the write ack
LOG LOG: [36m'Running spec: (Persistence) Cache will not keep data for an outdated write ack'[39m
LOG: 'Running spec: (Persistence) Cache will not keep data for an outdated write ack'
    [32mâœ“ [39m(Persistence) Cache will not keep data for an outdated write ack
LOG LOG: [36m'Running spec: (Memory) Cache will not keep data for an outdated write ack'[39m
LOG: 'Running spec: (Memory) Cache will not keep data for an outdated write ack'
    [32mâœ“ [39m(Memory) Cache will not keep data for an outdated write ack
LOG LOG: [36m'Running spec: (Persistence) Cache raises correct event if write is acked before watch delivers it'[39m
LOG: 'Running spec: (Persistence) Cache raises correct event if write is acked before watch delivers it'
    [32mâœ“ [39m(Persistence) Cache raises correct event if write is acked before watch delivers it
LOG LOG: [36m'Running spec: (Memory) Cache raises correct event if write is acked before watch delivers it'[39m
LOG: 'Running spec: (Memory) Cache raises correct event if write is acked before watch delivers it'
    [32mâœ“ [39m(Memory) Cache raises correct event if write is acked before watch delivers it
LOG LOG: [36m'Running spec: (Persistence) Cache will hold local write until watch catches up'[39m
LOG: 'Running spec: (Persistence) Cache will hold local write until watch catches up'
    [32mâœ“ [39m(Persistence) Cache will hold local write until watch catches up
LOG LOG: [36m'Running spec: (Memory) Cache will hold local write until watch catches up'[39m
LOG: 'Running spec: (Memory) Cache will hold local write until watch catches up'
    [32mâœ“ [39m(Memory) Cache will hold local write until watch catches up
LOG LOG: [36m'Running spec: (Persistence) Writes are pipelined'[39m
LOG: 'Running spec: (Persistence) Writes are pipelined'
    [32mâœ“ [39m(Persistence) Writes are pipelined
LOG LOG: [36m'Running spec: (Memory) Writes are pipelined'[39m
LOG: 'Running spec: (Memory) Writes are pipelined'
    [32mâœ“ [39m(Memory) Writes are pipelined
LOG LOG: [36m'Running spec: (Persistence) Pipelined writes can fail'[39m
LOG: 'Running spec: (Persistence) Pipelined writes can fail'
    [32mâœ“ [39m(Persistence) Pipelined writes can fail
LOG LOG: [36m'Running spec: (Memory) Pipelined writes can fail'[39m
LOG: 'Running spec: (Memory) Pipelined writes can fail'
    [32mâœ“ [39m(Memory) Pipelined writes can fail
LOG LOG: [36m'Running spec: (Persistence) Failed writes are released immediately.'[39m
LOG: 'Running spec: (Persistence) Failed writes are released immediately.'
    [32mâœ“ [39m(Persistence) Failed writes are released immediately.
LOG LOG: [36m'Running spec: (Memory) Failed writes are released immediately.'[39m
LOG: 'Running spec: (Memory) Failed writes are released immediately.'
    [32mâœ“ [39m(Memory) Failed writes are released immediately.
LOG LOG: [36m'Running spec: (Persistence) Held writes are not re-sent.'[39m
LOG: 'Running spec: (Persistence) Held writes are not re-sent.'
    [32mâœ“ [39m(Persistence) Held writes are not re-sent.
LOG LOG: [36m'Running spec: (Memory) Held writes are not re-sent.'[39m
LOG: 'Running spec: (Memory) Held writes are not re-sent.'
    [32mâœ“ [39m(Memory) Held writes are not re-sent.
LOG LOG: [36m'Running spec: (Persistence) Held writes are released when there are no queries left.'[39m
LOG: 'Running spec: (Persistence) Held writes are released when there are no queries left.'
    [32mâœ“ [39m(Persistence) Held writes are released when there are no queries left.
LOG LOG: [36m'Running spec: (Memory) Held writes are released when there are no queries left.'[39m
LOG: 'Running spec: (Memory) Held writes are released when there are no queries left.'
    [32mâœ“ [39m(Memory) Held writes are released when there are no queries left.
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code invalid-argument are rejected'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code invalid-argument are rejected'
    [32mâœ“ [39m(Persistence) Writes that fail with code invalid-argument are rejected
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code invalid-argument are rejected'[39m
LOG: 'Running spec: (Memory) Writes that fail with code invalid-argument are rejected'
    [32mâœ“ [39m(Memory) Writes that fail with code invalid-argument are rejected
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code not-found are rejected'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code not-found are rejected'
    [32mâœ“ [39m(Persistence) Writes that fail with code not-found are rejected
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code not-found are rejected'[39m
LOG: 'Running spec: (Memory) Writes that fail with code not-found are rejected'
    [32mâœ“ [39m(Memory) Writes that fail with code not-found are rejected
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code already-exists are rejected'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code already-exists are rejected'
    [32mâœ“ [39m(Persistence) Writes that fail with code already-exists are rejected
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code already-exists are rejected'[39m
LOG: 'Running spec: (Memory) Writes that fail with code already-exists are rejected'
    [32mâœ“ [39m(Memory) Writes that fail with code already-exists are rejected
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code permission-denied are rejected'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code permission-denied are rejected'
    [32mâœ“ [39m(Persistence) Writes that fail with code permission-denied are rejected
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code permission-denied are rejected'[39m
LOG: 'Running spec: (Memory) Writes that fail with code permission-denied are rejected'
    [32mâœ“ [39m(Memory) Writes that fail with code permission-denied are rejected
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code failed-precondition are rejected'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code failed-precondition are rejected'
    [32mâœ“ [39m(Persistence) Writes that fail with code failed-precondition are rejected
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code failed-precondition are rejected'[39m
LOG: 'Running spec: (Memory) Writes that fail with code failed-precondition are rejected'
    [32mâœ“ [39m(Memory) Writes that fail with code failed-precondition are rejected
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code aborted are rejected'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code aborted are rejected'
    [32mâœ“ [39m(Persistence) Writes that fail with code aborted are rejected
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code aborted are rejected'[39m
LOG: 'Running spec: (Memory) Writes that fail with code aborted are rejected'
    [32mâœ“ [39m(Memory) Writes that fail with code aborted are rejected
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code out-of-range are rejected'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code out-of-range are rejected'
    [32mâœ“ [39m(Persistence) Writes that fail with code out-of-range are rejected
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code out-of-range are rejected'[39m
LOG: 'Running spec: (Memory) Writes that fail with code out-of-range are rejected'
    [32mâœ“ [39m(Memory) Writes that fail with code out-of-range are rejected
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code unimplemented are rejected'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code unimplemented are rejected'
    [32mâœ“ [39m(Persistence) Writes that fail with code unimplemented are rejected
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code unimplemented are rejected'[39m
LOG: 'Running spec: (Memory) Writes that fail with code unimplemented are rejected'
    [32mâœ“ [39m(Memory) Writes that fail with code unimplemented are rejected
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code data-loss are rejected'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code data-loss are rejected'
    [32mâœ“ [39m(Persistence) Writes that fail with code data-loss are rejected
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code data-loss are rejected'[39m
LOG: 'Running spec: (Memory) Writes that fail with code data-loss are rejected'
    [32mâœ“ [39m(Memory) Writes that fail with code data-loss are rejected
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code resource_exhausted are not rejected'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code resource_exhausted are not rejected'
ERROR LOG: [36m'[2018-03-13T22:25:44.471Z]  @firebase/firestore:', 'Firestore (4.11.0): FirebaseError: [code=resource-exhausted]: transient error'[39m
ERROR: '[2018-03-13T22:25:44.471Z]  @firebase/firestore:', 'Firestore (4.11.0): FirebaseError: [code=resource-exhausted]: transient error'
ERROR LOG: [36m'[2018-03-13T22:25:44.471Z]  @firebase/firestore:', 'Firestore (4.11.0): Using maximum backoff delay to prevent overloading the backend.'[39m
ERROR: '[2018-03-13T22:25:44.471Z]  @firebase/firestore:', 'Firestore (4.11.0): Using maximum backoff delay to prevent overloading the backend.'
    [32mâœ“ [39m(Persistence) Writes that fail with code resource_exhausted are not rejected
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code resource_exhausted are not rejected'[39m
LOG: 'Running spec: (Memory) Writes that fail with code resource_exhausted are not rejected'
ERROR LOG: [36m'[2018-03-13T22:25:44.483Z]  @firebase/firestore:', 'Firestore (4.11.0): FirebaseError: [code=resource-exhausted]: transient error'[39m
ERROR: '[2018-03-13T22:25:44.483Z]  @firebase/firestore:', 'Firestore (4.11.0): FirebaseError: [code=resource-exhausted]: transient error'
ERROR LOG: [36m'[2018-03-13T22:25:44.483Z]  @firebase/firestore:', 'Firestore (4.11.0): Using maximum backoff delay to prevent overloading the backend.'[39m
ERROR: '[2018-03-13T22:25:44.483Z]  @firebase/firestore:', 'Firestore (4.11.0): Using maximum backoff delay to prevent overloading the backend.'
    [32mâœ“ [39m(Memory) Writes that fail with code resource_exhausted are not rejected
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code cancelled are retried'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code cancelled are retried'
    [32mâœ“ [39m(Persistence) Writes that fail with code cancelled are retried
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code cancelled are retried'[39m
LOG: 'Running spec: (Memory) Writes that fail with code cancelled are retried'
    [32mâœ“ [39m(Memory) Writes that fail with code cancelled are retried
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code unknown are retried'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code unknown are retried'
    [32mâœ“ [39m(Persistence) Writes that fail with code unknown are retried
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code unknown are retried'[39m
LOG: 'Running spec: (Memory) Writes that fail with code unknown are retried'
    [32mâœ“ [39m(Memory) Writes that fail with code unknown are retried
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code deadline-exceeded are retried'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code deadline-exceeded are retried'
    [32mâœ“ [39m(Persistence) Writes that fail with code deadline-exceeded are retried
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code deadline-exceeded are retried'[39m
LOG: 'Running spec: (Memory) Writes that fail with code deadline-exceeded are retried'
    [32mâœ“ [39m(Memory) Writes that fail with code deadline-exceeded are retried
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code internal are retried'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code internal are retried'
    [32mâœ“ [39m(Persistence) Writes that fail with code internal are retried
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code internal are retried'[39m
LOG: 'Running spec: (Memory) Writes that fail with code internal are retried'
    [32mâœ“ [39m(Memory) Writes that fail with code internal are retried
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code unavailable are retried'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code unavailable are retried'
    [32mâœ“ [39m(Persistence) Writes that fail with code unavailable are retried
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code unavailable are retried'[39m
LOG: 'Running spec: (Memory) Writes that fail with code unavailable are retried'
    [32mâœ“ [39m(Memory) Writes that fail with code unavailable are retried
LOG LOG: [36m'Running spec: (Persistence) Writes that fail with code unauthenticated are retried'[39m
LOG: 'Running spec: (Persistence) Writes that fail with code unauthenticated are retried'
    [32mâœ“ [39m(Persistence) Writes that fail with code unauthenticated are retried
LOG LOG: [36m'Running spec: (Memory) Writes that fail with code unauthenticated are retried'[39m
LOG: 'Running spec: (Memory) Writes that fail with code unauthenticated are retried'
    [32mâœ“ [39m(Memory) Writes that fail with code unauthenticated are retried
LOG LOG: [36m'Running spec: (Persistence) Ensure correct events after patching a doc (including a delete) and getting watcher events.'[39m
LOG: 'Running spec: (Persistence) Ensure correct events after patching a doc (including a delete) and getting watcher events.'
    [32mâœ“ [39m(Persistence) Ensure correct events after patching a doc (including a delete) and getting watcher events.
LOG LOG: [36m'Running spec: (Memory) Ensure correct events after patching a doc (including a delete) and getting watcher events.'[39m
LOG: 'Running spec: (Memory) Ensure correct events after patching a doc (including a delete) and getting watcher events.'
    [32mâœ“ [39m(Memory) Ensure correct events after patching a doc (including a delete) and getting watcher events.
LOG LOG: [36m'Running spec: (Persistence) Writes are resent after network disconnect'[39m
LOG: 'Running spec: (Persistence) Writes are resent after network disconnect'
    [32mâœ“ [39m(Persistence) Writes are resent after network disconnect
LOG LOG: [36m'Running spec: (Memory) Writes are resent after network disconnect'[39m
LOG: 'Running spec: (Memory) Writes are resent after network disconnect'
    [32mâœ“ [39m(Memory) Writes are resent after network disconnect

  makeConstructorPrivate
    [32mâœ“ [39mthrows on instantiation
    [32mâœ“ [39mstill exposes static methods
    [32mâœ“ [39mstill works with instanceof methods
    [32mâœ“ [39mstill works with class members

  AsyncQueue
    [32mâœ“ [39mschedules ops in right order
    [32mâœ“ [39mhandles failures
    [32mâœ“ [39mcan schedule ops in the future
    [32mâœ“ [39mCan cancel delayed operations
    [32mâœ“ [39mCan run all delayed operations early
    [32mâœ“ [39mCan run some delayed operations early
    [32mâœ“ [39mCan drain (non-delayed) operations

  immediatePredecessor
    [32mâœ“ [39mgenerates the correct immediate predecessor

  immediateSuccessor
    [32mâœ“ [39mgenerates the correct immediate successors

  nodePromise
    [32mâœ“ [39mresolves on success value
    [32mâœ“ [39mrejects on error

  ObjectMap
    [32mâœ“ [39mcan get/put/delete values
    [32mâœ“ [39mcan handle collisions

  SortedMap Tests
    [32mâœ“ [39mCreate node
    [32mâœ“ [39mYou can search a map for a specific key
    [32mâœ“ [39mYou can insert a new key/value pair into the tree
    [32mâœ“ [39mYou can remove a key/value pair from the map
    [32mâœ“ [39mMore removals
    [32mâœ“ [39mRemoval bug
    [32mâœ“ [39mTest increasing
    [32mâœ“ [39mThe structure should be valid after insertion (1)
    [32mâœ“ [39mThe structure should be valid after insertion (2)
    [32mâœ“ [39mRotate left leaves the tree in a valid state
    [32mâœ“ [39mRotate right leaves the tree in a valid state
    [32mâœ“ [39mThe structure should be valid after insertion (3)
    [32mâœ“ [39myou can overwrite a value
    [32mâœ“ [39mremoving the last element returns an empty map
    [32mâœ“ [39mempty .get()
    [32mâœ“ [39mempty .size
    [32mâœ“ [39mempty .remove()
    [32mâœ“ [39m.reverseTraversal() works.
    [32mâœ“ [39minsertion and removal of 100 items in random order.
    [36m- [39m[36mPerf[39m
    [36m- [39m[36mPerf: Insertion and removal with various # of items.[39m
    [36m- [39m[36mPerf: Comparison with {}: Insertion and removal with various # of items.[39m
ERROR LOG: [36m'[2018-03-13T22:25:45.169Z]  @firebase/firestore:', 'Firestore (4.11.0): FIRESTORE (4.11.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'[39m
ERROR: '[2018-03-13T22:25:45.169Z]  @firebase/firestore:', 'Firestore (4.11.0): FIRESTORE (4.11.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
    [32mâœ“ [39mSortedMapIterator empty test.
    [32mâœ“ [39mSortedMapIterator test with 10 items.
    [32mâœ“ [39mSortedMap.indexOf returns index.

  SortedSet
    [32mâœ“ [39mkeeps elements in the right order
    [32mâœ“ [39madds and deletes elements
    [32mâœ“ [39mupdates elements
    [32mâœ“ [39mcan iterate over all elements within a range
    [32mâœ“ [39mcan iterate over all elements while condition
    [32mâœ“ [39mcan find element equal or greater to provided.
    [32mâœ“ [39mcan unionWith another set.
    [32mâœ“ [39mcan build set from map keys.
    [32mâœ“ [39mreturns indexes of elements

  (Persistence=false) Database batch writes
    [32mâœ“ [39msupport empty batches
    [32mâœ“ [39mcan set documents
    [32mâœ“ [39mcan set documents with merge
    [32mâœ“ [39mcan update documents
    [32mâœ“ [39mcan delete documents
    [32mâœ“ [39mcommit atomically, raising correct events
    [32mâœ“ [39mfail atomically, raising correct events
    [32mâœ“ [39mwrite the same server timestamp across writes
    [32mâœ“ [39mcan write the same document multiple times
    [32mâœ“ [39mcan update nested fields

  (Persistence=true) Database batch writes
    [32mâœ“ [39msupport empty batches
    [32mâœ“ [39mcan set documents
    [32mâœ“ [39mcan set documents with merge
    [32mâœ“ [39mcan update documents
    [32mâœ“ [39mcan delete documents
    [32mâœ“ [39mcommit atomically, raising correct events
    [32mâœ“ [39mfail atomically, raising correct events
    [32mâœ“ [39mwrite the same server timestamp across writes
    [32mâœ“ [39mcan write the same document multiple times
    [32mâœ“ [39mcan update nested fields

  (Persistence=false) Cursors
    [32mâœ“ [39mcan page through items
    [32mâœ“ [39mcan be created from documents
    [32mâœ“ [39mcan be created from values
    [32mâœ“ [39mcan be created using document id
    [32mâœ“ [39mcan be used with reference values
    [32mâœ“ [39mcan be used in descending queries

  (Persistence=true) Cursors
    [32mâœ“ [39mcan page through items
    [32mâœ“ [39mcan be created from documents
    [32mâœ“ [39mcan be created from values
    [32mâœ“ [39mcan be created using document id
    [32mâœ“ [39mcan be used with reference values
    [32mâœ“ [39mcan be used in descending queries

  (Persistence=false) Database
    [32mâœ“ [39mcan set a document
    [32mâœ“ [39mdoc() will auto generate an ID
    [32mâœ“ [39mcan delete a document
    [32mâœ“ [39mcan update existing document
    [32mâœ“ [39mcan retrieve document that does not exist
    [32mâœ“ [39mcan merge data with an existing document using set
    [32mâœ“ [39mcan merge server timestamps
    [32mâœ“ [39mcan delete field using merge
    [32mâœ“ [39mcan replace an array by merging using set
    [32mâœ“ [39mcannot update nonexistent document
    [32mâœ“ [39mcan delete a field with an update
    [32mâœ“ [39mcan update nested fields
    [32mâœ“ [39mCollectionRef.add() resolves with resulting DocumentRef.
    [32mâœ“ [39mListen can be called multiple times
    [32mâœ“ [39mLocal document events are fired with hasLocalChanges=true.
    [32mâœ“ [39mMetadata only changes are not fired when no options provided
    [32mâœ“ [39mexposes "firestore" on document references.
    [32mâœ“ [39mexposes "firestore" on query references.
    [32mâœ“ [39mcan compare DocumentReference instances with isEqual().
    [32mâœ“ [39mcan compare Query instances with isEqual().
    [32mâœ“ [39mcan traverse collections and documents.
    [32mâœ“ [39mcan traverse collection and document parents.
    [32mâœ“ [39mcan queue writes while offline
    [32mâœ“ [39mcan get documents while offline
    [32mâœ“ [39mcan enable and disable networking
    documents: 
      [32mâœ“ [39mset/update should reject: undefined
      [32mâœ“ [39mset/update should reject: null
      [32mâœ“ [39mset/update should reject: 0
      [32mâœ“ [39mset/update should reject: foo
      [32mâœ“ [39mset/update should reject: a
      [32mâœ“ [39mset/update should reject: Tue Mar 13 2018 18:25:32 GMT-0400 (EDT)
    (Persistence=false) Queries are validated client-side
      [32mâœ“ [39msame inequality fields works
      [32mâœ“ [39minequality and equality on different fields works
      [32mâœ“ [39minequality same as orderBy works.
      [32mâœ“ [39minequality same as first orderBy works.
    (Persistence=true) Queries are validated client-side
      [32mâœ“ [39msame inequality fields works
      [32mâœ“ [39minequality and equality on different fields works
      [32mâœ“ [39minequality same as orderBy works.
      [32mâœ“ [39minequality same as first orderBy works.
    Listens are rejected remotely:
      [36m- [39m[36mwill reject listens[39m
      [36m- [39m[36mwill reject same listens twice in a row[39m
      [36m- [39m[36mwill reject gets[39m
      [36m- [39m[36mwill reject gets twice in a row[39m

  (Persistence=true) Database
    [32mâœ“ [39mcan set a document
    [32mâœ“ [39mdoc() will auto generate an ID
    [32mâœ“ [39mcan delete a document
    [32mâœ“ [39mcan update existing document
    [32mâœ“ [39mcan retrieve document that does not exist
    [32mâœ“ [39mcan merge data with an existing document using set
    [32mâœ“ [39mcan merge server timestamps
    [32mâœ“ [39mcan delete field using merge
    [32mâœ“ [39mcan replace an array by merging using set
    [32mâœ“ [39mcannot update nonexistent document
    [32mâœ“ [39mcan delete a field with an update
    [32mâœ“ [39mcan update nested fields
    [32mâœ“ [39mCollectionRef.add() resolves with resulting DocumentRef.
    [32mâœ“ [39mListen can be called multiple times
    [32mâœ“ [39mLocal document events are fired with hasLocalChanges=true.
    [32mâœ“ [39mMetadata only changes are not fired when no options provided
    [32mâœ“ [39mexposes "firestore" on document references.
    [32mâœ“ [39mexposes "firestore" on query references.
    [32mâœ“ [39mcan compare DocumentReference instances with isEqual().
    [32mâœ“ [39mcan compare Query instances with isEqual().
    [32mâœ“ [39mcan traverse collections and documents.
    [32mâœ“ [39mcan traverse collection and document parents.
    [32mâœ“ [39mcan queue writes while offline
    [32mâœ“ [39mcan get documents while offline
    [32mâœ“ [39mcan enable and disable networking
    documents: 
      [32mâœ“ [39mset/update should reject: undefined
      [32mâœ“ [39mset/update should reject: null
      [32mâœ“ [39mset/update should reject: 0
      [32mâœ“ [39mset/update should reject: foo
      [32mâœ“ [39mset/update should reject: a
      [32mâœ“ [39mset/update should reject: Tue Mar 13 2018 18:25:32 GMT-0400 (EDT)
    (Persistence=false) Queries are validated client-side
      [32mâœ“ [39msame inequality fields works
      [32mâœ“ [39minequality and equality on different fields works
      [32mâœ“ [39minequality same as orderBy works.
      [32mâœ“ [39minequality same as first orderBy works.
    (Persistence=true) Queries are validated client-side
      [32mâœ“ [39msame inequality fields works
      [32mâœ“ [39minequality and equality on different fields works
      [32mâœ“ [39minequality same as orderBy works.
      [32mâœ“ [39minequality same as first orderBy works.
    Listens are rejected remotely:
      [36m- [39m[36mwill reject listens[39m
      [36m- [39m[36mwill reject same listens twice in a row[39m
      [36m- [39m[36mwill reject gets[39m
      [36m- [39m[36mwill reject gets twice in a row[39m

  (Persistence=false) Nested Fields
    [32mâœ“ [39mcan be written with set()
    [32mâœ“ [39mcan be read directly with .get(<string>)
    [32mâœ“ [39mcan be read directly with .get(<FieldPath>)
    [32mâœ“ [39mcan be updated with update(<string>)
    [32mâœ“ [39mcan be updated with update(<FieldPath>)
    [32mâœ“ [39mcan be used with query.where(<string>).
    [32mâœ“ [39mcan be used with query.where(<FieldPath>).
    [32mâœ“ [39mcan be used with query.orderBy(<string>).
    [32mâœ“ [39mcan be used with query.orderBy(<FieldPath>).

  (Persistence=true) Nested Fields
    [32mâœ“ [39mcan be written with set()
    [32mâœ“ [39mcan be read directly with .get(<string>)
    [32mâœ“ [39mcan be read directly with .get(<FieldPath>)
    [32mâœ“ [39mcan be updated with update(<string>)
    [32mâœ“ [39mcan be updated with update(<FieldPath>)
    [32mâœ“ [39mcan be used with query.where(<string>).
    [32mâœ“ [39mcan be used with query.where(<FieldPath>).
    [32mâœ“ [39mcan be used with query.orderBy(<string>).
    [32mâœ“ [39mcan be used with query.orderBy(<FieldPath>).

  (Persistence=false) Fields with special characters
    [32mâœ“ [39mcan be written with set()
    [32mâœ“ [39mcan be read directly with .data(<field>)
    [32mâœ“ [39mcan be updated with update()
    [32mâœ“ [39mcan be used in query filters.
    [32mâœ“ [39mcan be used in a query orderBy.

  (Persistence=true) Fields with special characters
    [32mâœ“ [39mcan be written with set()
    [32mâœ“ [39mcan be read directly with .data(<field>)
    [32mâœ“ [39mcan be updated with update()
    [32mâœ“ [39mcan be used in query filters.
    [32mâœ“ [39mcan be used in a query orderBy.

  (Persistence=false) Queries
    [32mâœ“ [39mcan issue limit queries
    [32mâœ“ [39mcan issue limit queries using descending sort order
    [32mâœ“ [39mkey order is descending for descending inequality
    [32mâœ“ [39mcan use unary filters
    [32mâœ“ [39mcan filter on infinity
    [32mâœ“ [39mwill not get metadata only updates
    [32mâœ“ [39mcan listen for the same query with different options
    [32mâœ“ [39mcan issue queries with Dates differing in milliseconds
    [32mâœ“ [39mcan listen for QueryMetadata changes
    [32mâœ“ [39mcan explicitly sort by document ID
    [32mâœ“ [39mcan query by document ID
    [32mâœ“ [39mcan query by document ID using refs
    [32mâœ“ [39mcan query while reconnecting to network
    [32mâœ“ [39mQueries trigger with isFromCache=true when offline

  (Persistence=true) Queries
    [32mâœ“ [39mcan issue limit queries
    [32mâœ“ [39mcan issue limit queries using descending sort order
    [32mâœ“ [39mkey order is descending for descending inequality
    [32mâœ“ [39mcan use unary filters
    [32mâœ“ [39mcan filter on infinity
    [32mâœ“ [39mwill not get metadata only updates
    [32mâœ“ [39mcan listen for the same query with different options
    [32mâœ“ [39mcan issue queries with Dates differing in milliseconds
    [32mâœ“ [39mcan listen for QueryMetadata changes
    [32mâœ“ [39mcan explicitly sort by document ID
    [32mâœ“ [39mcan query by document ID
    [32mâœ“ [39mcan query by document ID using refs
    [32mâœ“ [39mcan query while reconnecting to network
    [32mâœ“ [39mQueries trigger with isFromCache=true when offline

  (Persistence=false) Server Timestamps
    [32mâœ“ [39mwork via set()
    [32mâœ“ [39mwork via update()
    [32mâœ“ [39mwork via transaction set()
    [32mâœ“ [39mwork via transaction update()
    [32mâœ“ [39mcan return estimated value
    [32mâœ“ [39mcan return previous value
    [32mâœ“ [39mcan return previous value of different type
    [32mâœ“ [39mcan return previous value through consecutive updates
    [32mâœ“ [39muses previous value from local mutation
    [32mâœ“ [39mfail via update() on nonexistent document.
    [32mâœ“ [39mfail via transaction update() on nonexistent document.

  (Persistence=true) Server Timestamps
    [32mâœ“ [39mwork via set()
    [32mâœ“ [39mwork via update()
    [32mâœ“ [39mwork via transaction set()
    [32mâœ“ [39mwork via transaction update()
    [32mâœ“ [39mcan return estimated value
    [32mâœ“ [39mcan return previous value
    [32mâœ“ [39mcan return previous value of different type
    [32mâœ“ [39mcan return previous value through consecutive updates
    [32mâœ“ [39muses previous value from local mutation
    [32mâœ“ [39mfail via update() on nonexistent document.
    [32mâœ“ [39mfail via transaction update() on nonexistent document.

  (Persistence=false) Smoke Test
    [32mâœ“ [39mcan write a single document
    [32mâœ“ [39mcan read a written document
    [32mâœ“ [39mcan read a written document with DocumentKey
    [32mâœ“ [39mwill fire local and remote events
    [32mâœ“ [39mwill fire value events for empty collections
    [32mâœ“ [39mcan get collection query
    [36m- [39m[36mcan query by field and use order by[39m

  (Persistence=true) Smoke Test
    [32mâœ“ [39mcan write a single document
    [32mâœ“ [39mcan read a written document
    [32mâœ“ [39mcan read a written document with DocumentKey
    [32mâœ“ [39mwill fire local and remote events
    [32mâœ“ [39mwill fire value events for empty collections
    [32mâœ“ [39mcan get collection query
    [36m- [39m[36mcan query by field and use order by[39m

  (Persistence=false) Database transactions
    [32mâœ“ [39mget documents
    [32mâœ“ [39mdelete documents
    [32mâœ“ [39mget nonexistent document then create
    [32mâœ“ [39mget nonexistent document then fail patch
    [32mâœ“ [39mcan't delete document then patch
    [32mâœ“ [39mcan't delete document then set
    [32mâœ“ [39mwrite document twice
    [32mâœ“ [39mset document with merge
    [32mâœ“ [39mincrement transactionally
    [32mâœ“ [39mupdate transactionally
    [32mâœ“ [39mcan update nested fields transactionally
    [32mâœ“ [39mhandle reading one doc and writing another
    [32mâœ“ [39mhandle reading a doc twice with different versions
    [32mâœ“ [39mcannot read after writing
    [32mâœ“ [39mcannot have a get without mutations
    [32mâœ“ [39mare successful with no transaction operations
    [32mâœ“ [39mare cancelled on rejected promise
    [32mâœ“ [39mare cancelled on throw
    must return a promise:
      [32mâœ“ [39mundefined is rejected
      [32mâœ“ [39mnull is rejected
      [32mâœ“ [39m5 is rejected
      [32mâœ“ [39m[object Object] is rejected
      [32mâœ“ [39m[object Object] is rejected
      [32mâœ“ [39m[object Object] is rejected

  (Persistence=true) Database transactions
    [32mâœ“ [39mget documents
    [32mâœ“ [39mdelete documents
    [32mâœ“ [39mget nonexistent document then create
    [32mâœ“ [39mget nonexistent document then fail patch
    [32mâœ“ [39mcan't delete document then patch
    [32mâœ“ [39mcan't delete document then set
    [32mâœ“ [39mwrite document twice
    [32mâœ“ [39mset document with merge
    [32mâœ“ [39mincrement transactionally
    [32mâœ“ [39mupdate transactionally
    [32mâœ“ [39mcan update nested fields transactionally
    [32mâœ“ [39mhandle reading one doc and writing another
    [32mâœ“ [39mhandle reading a doc twice with different versions
    [32mâœ“ [39mcannot read after writing
    [32mâœ“ [39mcannot have a get without mutations
    [32mâœ“ [39mare successful with no transaction operations
    [32mâœ“ [39mare cancelled on rejected promise
    [32mâœ“ [39mare cancelled on throw
    must return a promise:
      [32mâœ“ [39mundefined is rejected
      [32mâœ“ [39mnull is rejected
      [32mâœ“ [39m5 is rejected
      [32mâœ“ [39m[object Object] is rejected
      [32mâœ“ [39m[object Object] is rejected
      [32mâœ“ [39m[object Object] is rejected

  (Persistence=false) Firestore
    [32mâœ“ [39mcan read and write null fields
    [32mâœ“ [39mcan read and write array fields
    [32mâœ“ [39mcan read and write geo point fields
    [32mâœ“ [39mcan read and write bytes fields
    [32mâœ“ [39mcan read and write timestamp fields
    [32mâœ“ [39mcan read and write document references
    [32mâœ“ [39mcan read and write document references in an array

  (Persistence=true) Firestore
    [32mâœ“ [39mcan read and write null fields
    [32mâœ“ [39mcan read and write array fields
    [32mâœ“ [39mcan read and write geo point fields
    [32mâœ“ [39mcan read and write bytes fields
    [32mâœ“ [39mcan read and write timestamp fields
    [32mâœ“ [39mcan read and write document references
    [32mâœ“ [39mcan read and write document references in an array

  (Persistence=false) Validation:
    [32mâœ“ [39mListen options are validated
    [32mâœ“ [39mSnapshot options are validated
    [32mâœ“ [39mBatch writes require correct Document References
    [32mâœ“ [39mTransaction writes require correct Document References
    [32mâœ“ [39mField paths must not have empty segments
    [32mâœ“ [39mField paths must not have invalid segments
    FirestoreSettings
      [32mâœ“ [39mvalidates options
      [32mâœ“ [39mdisallows changing settings after use
    Firestore
      [32mâœ“ [39mdisallows calling enablePersistence after use
      [32mâœ“ [39mthrows for invalid transaction functions.
      [32mâœ“ [39mfails transaction if function doesn't return a Promise.
    Collection paths
      [32mâœ“ [39mmust be strings
      [32mâœ“ [39mmust be odd-length
      [32mâœ“ [39mmust not have empty segments
    Document paths
      [32mâœ“ [39mmust be strings
      [32mâœ“ [39mmust be even-length
    Writes
      [32mâœ“ [39mmust be objects.
      [32mâœ“ [39mmust not contain custom objects or functions.
      [32mâœ“ [39mmust not contain directly nested arrays.
      [32mâœ“ [39mmay contain indirectly nested arrays.
      [32mâœ“ [39mmust not contain undefined.
      [32mâœ“ [39mmust not contain references to a different database
      [32mâœ“ [39mmust not contain reserved field names.
      [32mâœ“ [39mvia set() must not contain FieldValue.delete()
      [32mâœ“ [39mvia update() must not contain nested FieldValue.delete()
    Queries
      [32mâœ“ [39mwith non-positive limit fail
      [32mâœ“ [39mwith null or NaN inequalities fail
      [32mâœ“ [39mcannot be created from documents missing sort values
      [32mâœ“ [39mmust not have more components than order by.
      [32mâœ“ [39morder-by-key bounds must be strings without slashes.
      [32mâœ“ [39mwith different inequality fields fail
      [32mâœ“ [39mwith inequality different than first orderBy fail.
      [32mâœ“ [39mmust not specify starting or ending point after orderBy
      [32mâœ“ [39mmust be non-empty strings or references when filtering by document ID

  (Persistence=true) Validation:
    [32mâœ“ [39mListen options are validated
    [32mâœ“ [39mSnapshot options are validated
    [32mâœ“ [39mBatch writes require correct Document References
    [32mâœ“ [39mTransaction writes require correct Document References
    [32mâœ“ [39mField paths must not have empty segments
    [32mâœ“ [39mField paths must not have invalid segments
    FirestoreSettings
      [32mâœ“ [39mvalidates options
      [32mâœ“ [39mdisallows changing settings after use
    Firestore
      [32mâœ“ [39mdisallows calling enablePersistence after use
      [32mâœ“ [39mthrows for invalid transaction functions.
      [32mâœ“ [39mfails transaction if function doesn't return a Promise.
    Collection paths
      [32mâœ“ [39mmust be strings
      [32mâœ“ [39mmust be odd-length
      [32mâœ“ [39mmust not have empty segments
    Document paths
      [32mâœ“ [39mmust be strings
      [32mâœ“ [39mmust be even-length
    Writes
      [32mâœ“ [39mmust be objects.
      [32mâœ“ [39mmust not contain custom objects or functions.
      [32mâœ“ [39mmust not contain directly nested arrays.
      [32mâœ“ [39mmay contain indirectly nested arrays.
      [32mâœ“ [39mmust not contain undefined.
      [32mâœ“ [39mmust not contain references to a different database
      [32mâœ“ [39mmust not contain reserved field names.
      [32mâœ“ [39mvia set() must not contain FieldValue.delete()
      [32mâœ“ [39mvia update() must not contain nested FieldValue.delete()
    Queries
      [32mâœ“ [39mwith non-positive limit fail
      [32mâœ“ [39mwith null or NaN inequalities fail
      [32mâœ“ [39mcannot be created from documents missing sort values
      [32mâœ“ [39mmust not have more components than order by.
      [32mâœ“ [39morder-by-key bounds must be strings without slashes.
      [32mâœ“ [39mwith different inequality fields fail
      [32mâœ“ [39mwith inequality different than first orderBy fail.
      [32mâœ“ [39mmust not specify starting or ending point after orderBy
      [32mâœ“ [39mmust be non-empty strings or references when filtering by document ID

  (Persistence=false) Idle Timeout
    [32mâœ“ [39mcan write document after idle timeout
    [32mâœ“ [39mcan watch documents after idle timeout

  (Persistence=true) Idle Timeout
    [32mâœ“ [39mcan write document after idle timeout
    [32mâœ“ [39mcan watch documents after idle timeout

  WebChannel
    [32mâœ“ [39mreceives error messages
    makeUrl
      [32mâœ“ [39mincludes project ID and database ID

  Remote Storage
    [32mâœ“ [39mcan write
    [32mâœ“ [39mcan read
    [32mâœ“ [39mcan read deleted documents

  Watch Stream
    [32mâœ“ [39mcan be stopped before handshake

  Write Stream
    [32mâœ“ [39mcan be stopped before handshake
ERROR LOG: [36m'[2018-03-13T22:35:02.802Z]  @firebase/firestore:', 'Firestore (4.11.0): FIRESTORE (4.11.0) INTERNAL ASSERTION FAILED: Handshake must be complete before writing mutations'[39m
ERROR: '[2018-03-13T22:35:02.802Z]  @firebase/firestore:', 'Firestore (4.11.0): FIRESTORE (4.11.0) INTERNAL ASSERTION FAILED: Handshake must be complete before writing mutations'
    [32mâœ“ [39mcan be stopped after handshake
    [32mâœ“ [39mcloses when idle
    [32mâœ“ [39mcancels idle on write

HeadlessChrome 65.0.3325 (Mac OS X 10.13.3): Executed 863 of 876 (skipped 13)[32m SUCCESS[39m (9 mins 33.843 secs / 9 mins 30.454 secs)
[32mTOTAL: 863 SUCCESS[39m

Done in 616.28s.
